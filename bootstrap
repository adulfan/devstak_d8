#!/usr/bin/env bash

VBOX_VERSION_REQUIRED='5.0.0'
VAGRANT_VERSION_REQUIRED='1.8.1'

###########################
### USAGE AND VERSION INFO
###########################
function HELP {
  echo '
USAGE

1. Run the script
2. Restart your shell
3. ???
4. Profit

Sets up a complete development environment using rbenv, pyenv, and ndenv.
'
  exit 1
}

function VERSION {
  echo "$(cat .devstack-version)"
}


###########################
### INSTALLATION FUNCTIONS
###########################
function install_command_line_tools {
  loud "Checking Apple CLI Tools"

  if pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &> /dev/null; then
    return
  fi

  loud "Installing OS X Command Line Tools"

  # OS X Command Line Tools
  quiet "To install the OS X Command Line Tools, click on the install button on the dialogue that appears."
  echo -en "\tPress enter to continue... "
  read

  xcode-select --install

  echo -en "\tPress enter when the installation is complete. "
  read

  if pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &> /dev/null; then
    quiet "Done installing OS X Command Line Tools."
  else
    loud "ERROR: Command line tools not found."
  fi
}

function install_virtual_box {
  loud "Checking VirtualBox"
  if hash vboxmanage &> /dev/null; then
    VBOX_VERSION_LONG=$( cd ~; vboxmanage --version)
    VBOX_VERSION=${VBOX_VERSION_LONG:0:5}
  fi

  if hash vboxmanage &> /dev/null && (( $(vercomp $VBOX_VERSION $VBOX_VERSION_REQUIRED) < 2 )); then
    return
  fi

  if hash vboxmanage &> /dev/null; then
    loud "ERROR: VIRTUALBOX IS OUT OF DATE."
  else
    loud "ERROR: VIRTUALBOX IS NOT INSTALLED."
  fi
  echo -en "\tInstall VirtualBox version $VBOX_VERSION_REQUIRED or greater\n\tPress enter to open the download page in your browser... "
  read

  open "https://encrypted.google.com/search?hl=en&q=virtualbox+version+$VBOX_VERSION_REQUIRED#hl=en&q=virtualbox+download+version&btnI=745"

  echo -en "\tOnce installed press enter to continue... "
  read

  if hash vboxmanage &> /dev/null && (( $(vercomp $VBOX_VERSION $VBOX_VERSION_REQUIRED) < 2 )); then
    quiet "Done installing Virtual Box"
  else
    loud "ERROR: Virtual Box version $VBOX_VERSION_REQUIRED or greater not installed."
    exit 1
  fi
}

function install_vagrant {
  loud "Checking Vagrant"
  VAGRANT_VERSION=$( cd ~; vagrant --version 2> /dev/null | awk '{ print $2 }')
  if hash vagrant &> /dev/null && (( $(vercomp $VAGRANT_VERSION $VAGRANT_VERSION_REQUIRED) < 2 )); then
    return
  fi

  local vagrant_url="https://releases.hashicorp.com/vagrant/$VAGRANT_VERSION_REQUIRED/vagrant_$VAGRANT_VERSION_REQUIRED.dmg"
  local vagrant_dmg=$( strip_url "${vagrant_url}" )
  local vagrant_pkg="Vagrant.pkg"

  loud "Installing Vagrant"

  quiet "Downloading Vagrant"
  curl -sOL "$vagrant_url"

  local vagrant_path=''

  attach_volume "${vagrant_dmg}" vagrant_path

  if hash vagrant &> /dev/null; then
    quiet "Uninstalling previous Vagrant"
    echo -e "Yes\n\n" | "${vagrant_path}/uninstall.tool" >> /dev/null
  fi
  rm -rf "${HOME}/.vagrant.d"

  install_pkg "${vagrant_path}" "${vagrant_pkg}"
  detach_volume "${vagrant_path}"

  rm -f "${vagrant_dmg}"

  quiet "Done installing Vagrant"
}

function install_vagrant_hostmanager {
  loud "Checking Vagrant Hostmanager"
  if vagrant plugin list | grep "vagrant-hostmanager" &> /dev/null; then
    return
  fi

  loud "Installing Vagrant Hostmanager"

  vagrant plugin install vagrant-hostmanager &> /dev/null
  quiet "Done installing Vagrant Hostmanager"
}

function install_vagrant_parallels_provider {
  loud "Checking Vagrant Parallels Provider"
  if vagrant plugin list | grep "vagrant-parallels" &> /dev/null; then
    return
  fi

  loud "Installing Vagrant Parallels Provider"

  vagrant plugin install vagrant-parallels &> /dev/null
  quiet "Done installing Vagrant Parallels Provider"
}

function install_homebrew {
  loud "Checking Homebrew"
  if ! hash brew &> /dev/null; then
    quiet "Installing Homebrew"
    (cd ~; echo -e "\n" | ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" &> /dev/null)
    quiet "Done installing Homebrew"
  fi

  quiet "Updating Homebrew packages"
  brew update &> /dev/null
}

function install_ansible {
  loud "Checking Ansible Environment"

  # Ensure ansible is installed
  if ! hash ansible &> /dev/null; then
    quiet "Installing ansible"
    brew install ansible &> /dev/null
  fi
}

# Install PHP for use below with Linters for local IDE's
function install_php {
  loud "Checking PHP Environment"

  # Ensure PHP is installed
  if ! [ -f "/usr/local/bin/php" ] &> /dev/null; then
    quiet "Installing PHP"
    brew install homebrew/php/php55 --with-pear &> /dev/null
  fi
}

# Install Composer, used for installing PHP project dependencies
function install_composer {
  loud "Checking for Composer"

  # Ensure Composer is installed
  if ! hash composer &> /dev/null; then
    quiet "Installing Composer"
    brew install homebrew/php/composer &> /dev/null
  fi
}

# Install WP-CLI on host machine
function install_wp_cli {
  if ! hash wp &> /dev/null; then
    loud "Installing WordPress CLI tools"
    brew install wp-cli &> /dev/null
    quiet "Done Installing WordPress CLI tools"
  fi
}

# Install PHP Code Quality Tools
function install_php_cqt {
  loud "Checking for PHP Code Quality Tools"

  # Ensure phpmd is installed
  # http://phpmd.org
  if ! hash phpmd &> /dev/null; then
    quiet "Installing phpmd (PHP Mess Detector)"
    brew install homebrew/php/phpmd &> /dev/null
  fi

  # Ensure phpcs is installed
  # http://pear.php.net/package/PHP_CodeSniffer
  if ! hash phpcs &> /dev/null; then
    quiet "Installing phpcs (PHP_CodeSniffer)"
    brew install homebrew/php/php-code-sniffer &> /dev/null
  fi

  # Ensure php-cs-fixer is installed
  # http://cs.sensiolabs.org
  if ! hash php-cs-fixer &> /dev/null; then
    quiet "Installing php-cs-fixer (PHP Coding Standards Fixer)"
    brew install homebrew/php/php-cs-fixer &> /dev/null
  fi
}

function install_sassc {
  loud "Checking Sass Environment"

  # Ensure sassc is installed
  if ! hash sassc &> /dev/null; then
    quiet "Installing sassc"
    brew install sassc &> /dev/null
  fi
}

function install_node {
  loud "Checking NodeJS Environment"

  # Ensure node is installed
  if ! hash node &> /dev/null; then
    quiet "Installing node"
    brew install node &> /dev/null
  fi
}

function install_bower {
  loud "Checking for bower"

  # Ensure bower is installed
  if ! hash bower &> /dev/null; then
    quiet "Installing bower"
    npm install -g bower &> /dev/null
  fi
}

function install_gulp {
  loud "Checking for gulp"

  # Ensure gulp is installed
  if ! hash gulp &> /dev/null; then
    quiet "Installing gulp"
    npm install -g gulp &> /dev/null
  fi
}

function install_grunt {
  loud "Checking for grunt"

  # Ensure grunt is installed
  if ! hash grunt &> /dev/null; then
    quiet "Installing grunt"
    npm install -g grunt-cli &> /dev/null
  fi
}

function install_browsersync {
  loud "Checking for browser-sync"

  # Ensure browser-sync is installed
  if ! hash browser-sync &> /dev/null; then
    quiet "Installing browser-sync"
    npm install -g browser-sync &> /dev/null
  fi
}

function install_azure_cli {
  loud "Checking for azure cli tools"

  # Ensure azure cli tools is installed
  if ! hash azure &> /dev/null; then
    quiet "Installing azure"
    npm install -g azure-cli &> /dev/null
  fi

function install_vagrant_reload {
  if vagrant plugin list | grep "vagrant-reload" &> /dev/null; then
    return
  fi

  quiet "Installing Vagrant Reload"
  vagrant plugin install vagrant-reload &> /dev/null
}

function setup_laravel {
  loud "Setting up Laravel Environment"

  #if ! hash laravel &> /dev/null; then
    #Download Laravel using Composer
    quiet "Installing Laravel"
    composer global require "laravel/installer=~2.0" &> /dev/null
  #fi
  echo 'export PATH=~/.composer/vendor/bin:$PATH' >> ~/.bash_profile

  # remove existing docroot before installing
  if [ -d "docroot" ]; then
    rm -rf docroot
  fi

  # install laravel into docroot
  laravel new docroot &> /dev/null

  quiet "Done setting up Laravel"
}

function setup_homestead {
  loud "Setting up Homestead environment"

  quiet "Setting up Vagrant Box for Homestead"

  install_vagrant_reload

  #vagrant box add alvassin/homestead-parallels &> /dev/null

  quiet "Installing Homestead"
  composer global require "laravel/homestead=~2.0" &> /dev/null

  # copy our "hello, world" files
  cp provisioning/roles/laravel/src/app/Http/routes.php docroot/app/Http/routes.php &> /dev/null
  cp provisioning/roles/laravel/src/app/Http/Controllers/WelcomeController.php docroot/app/Http/Controllers/WelcomeController.php &> /dev/null
  cp provisioning/roles/laravel/src/resources/views/arrived.blade.php docroot/resources/views/arrived.blade.php &> /dev/null

  # turn things on
  mv docroot/.env.example docroot/.env &> /dev/null

  # Laravel 4?
  #elif -d "htdocs/app/views/" &> /dev/null; then
  #  cp src/homestead/hello.php htdocs/app/views/hello.php &> /dev/null
  #fi
}

# function run_custom {
#   loud "Running any custom bootstrap scripts"
#   export -f run_script
#   find scripts/bootstrap.d/*.sh -exec bash -c 'run_script "$0"' {} \; 2> /dev/null
# }

#####################
### HELPER FUNCTIONS
#####################
function loud {
  echo -e "\n#### ${1}"
}

function quiet {
  echo -e "\t${1}"
}

function PROJECT_NAME {
  # Grab project Name from Vagrantfile
  project_name_regex='project_name = "([^"]*)"'
  [[ $(cat Vagrantfile) =~ $project_name_regex ]]
  echo "${BASH_REMATCH[1]}"
}

# Params:
#   url ending in dmg name
function strip_url {
  echo $( sed "s/^.*\///" <(echo "${1}"))
}

# Params:
#   dmg file path
#   varaible for return volume path
function attach_volume {
  quiet "Attaching ${1}"
  volume="$(sudo hdiutil attach "${1}" | grep "Volumes" | cut -f 3- )"
  eval "${2}=\"${volume}\""
  quiet "\tAttached to ${volume}"
}

# Params:
#   volume path
function detach_volume {
  quiet "Detaching ${1}"
  sudo hdiutil detach "${1}" >> /dev/null
  quiet "\tDetached"
}
# Params:
#   volume path
#   pkg file name
function install_pkg {
  quiet "Installing '${1}/${2}'. Do not run the .pkg file that may pop up."
  sudo installer -pkg "${volume}/${2}" -target / >> /dev/null
  quiet "\tInstalled ${2}"
}

# Params:
#   dmg file path
#   pkg file name
function install_dmg {
  volume_path=''

  attach_volume "${1}" volume_path
  install_pkg "${volume_path}" ${2}
  detach_volume "${volume_path}"
}

function vercomp () {
    if [[ $1 == $2 ]]
    then
        echo 0
        return
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            echo 1
            return
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            echo 2
            return
        fi
    done
    echo 0
}

function run_script () {
  local path=$1
  echo -e "\tRunning $(basename $path)"
  source $path
}

#####################
### MAIN FUNCTION
#####################
function main {
  # Install host VM tools
  install_command_line_tools
  # install_virtual_box
  # install_parallels
  install_vagrant
  install_vagrant_hostmanager
  install_vagrant_parallels_provider
  install_homebrew
  install_ansible

  # Install some local PHP tools for in IDE code linting and QA
  install_php
  install_composer
  install_php_cqt
  # install_coder # TODO for drupal coding standards linting

  # Install host FE tools for running FE processes locally for those who want
  # to. Running grunt/gulp on the host performs better than in VM.
  install_sassc
  install_node
  install_bower
  # install_yeoman?
  install_gulp
  install_grunt
  install_browsersync

  # Managed Hosting Service Tools to optionally enable
  install_azure_cli

  setup_laravel
  setup_homestead

  # Install tools for running automated QA on host machines.
  # Especially useful for browser testing automation tools such as WebDriver
  # based tests.
  # TODO: install_webdriver...

  # Run any custom scripts for your project
  # run_custom

  loud 'Bootstrap Complete!'
  quiet 'Make sure you restart your shell. Now!\n'
}

################
### Parse Opts
################
while getopts ":hv" opt
do
  case $opt in
    h)
      echo -e "\nDevStack Bootstrap Script v$(VERSION)
      $(HELP)
      "
      exit 0
      ;;
    v)
      echo "$(VERSION)"
      exit 0
      ;;
    \?)
      echo ""
      echo "Invalid option: -${OPTARG}" >&2
      HELP
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
   esac
done

main

#!/usr/bin/env bash

VAGRANT_DEFAULT_PROVIDER='parallels'

###########################
### USAGE AND VERSION INFO
###########################
function HELP {
  echo '
USAGE

1. Run the script
2. Restart your shell
3. ???
4. Profit

Sets up a complete development environment using rbenv, pyenv, and ndenv.
'
  exit 1
}

function VERSION {
  echo "$(cat .devstack-version)"
}


###########################
### INSTALLATION FUNCTIONS
###########################
function install_command_line_tools {
  loud "Checking Apple CLI Tools"

  if pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &> /dev/null; then
    return
  fi

  loud "Installing OS X Command Line Tools"

  # OS X Command Line Tools
  quiet "To install the OS X Command Line Tools, click on the install button on the dialogue that appears."
  echo -en "\tPress enter to continue... "
  read

  xcode-select --install

  echo -en "\tPress enter when the installation is complete. "
  read

  if pkgutil --pkg-info=com.apple.pkg.CLTools_Executables &> /dev/null; then
    quiet "Done installing OS X Command Line Tools."
  else
    loud "ERROR: Command line tools not found."
  fi
}

# function install_parallels {
#   # TODO: brew install parallels
# }

# function run_custom {
#   loud "Running any custom bootstrap scripts"
#   export -f run_script
#   find scripts/bootstrap.d/*.sh -exec bash -c 'run_script "$0"' {} \; 2> /dev/null
# }

#####################
### HELPER FUNCTIONS
#####################
function loud {
  echo -e "\n#### ${1}"
}

function quiet {
  echo -e "\t${1}"
}

function PROJECT_NAME {
  # Grab project Name from Vagrantfile
  project_name_regex='project_name = "([^"]*)"'
  [[ $(cat Vagrantfile) =~ $project_name_regex ]]
  echo "${BASH_REMATCH[1]}"
}

# Params:
#   url ending in dmg name
function strip_url {
  echo $( sed "s/^.*\///" <(echo "${1}"))
}

# Params:
#   dmg file path
#   varaible for return volume path
function attach_volume {
  quiet "Attaching ${1}"
  volume="$(sudo hdiutil attach "${1}" | grep "Volumes" | cut -f 3- )"
  eval "${2}=\"${volume}\""
  quiet "\tAttached to ${volume}"
}

# Params:
#   volume path
function detach_volume {
  quiet "Detaching ${1}"
  sudo hdiutil detach "${1}" >> /dev/null
  quiet "\tDetached"
}
# Params:
#   volume path
#   pkg file name
function install_pkg {
  quiet "Installing '${1}/${2}'. Do not run the .pkg file that may pop up."
  sudo installer -pkg "${volume}/${2}" -target / >> /dev/null
  quiet "\tInstalled ${2}"
}

# Params:
#   dmg file path
#   pkg file name
function install_dmg {
  volume_path=''

  attach_volume "${1}" volume_path
  install_pkg "${volume_path}" ${2}
  detach_volume "${volume_path}"
}

function vercomp () {
    if [[ $1 == $2 ]]
    then
        echo 0
        return
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            echo 1
            return
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            echo 2
            return
        fi
    done
    echo 0
}

function run_script () {
  local path=$1
  echo -e "\tRunning $(basename $path)"
  source $path
}


#####################
### MAIN FUNCTION
#####################
function main {
  # Install host VM tools
  install_command_line_tools
  # install_parallels

  # install_coder # TODO for drupal coding standards linting


  # Install tools for running automated QA on host machines.
  # Especially useful for browser testing automation tools such as WebDriver
  # based tests.
  # TODO: install_webdriver...

  # Run any custom scripts for your project
  # run_custom

  # Trigger other dependency installs?
  # `composer install`
  # `npm install`
  # `bower install`

  loud 'Bootstrap Complete!'
  quiet 'Make sure you restart your shell. Now!\n'
}

################
### Parse Opts
################
while getopts ":hv" opt
do
  case $opt in
    h)
      echo -e "\nDevStack Bootstrap Script v$(VERSION)
      $(HELP)
      "
      exit 0
      ;;
    v)
      echo "$(VERSION)"
      exit 0
      ;;
    \?)
      echo ""
      echo "Invalid option: -${OPTARG}" >&2
      HELP
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
   esac
done

main
